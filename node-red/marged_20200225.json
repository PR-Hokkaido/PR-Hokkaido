[{"id":"8feaaef5.d1dd1","type":"tab","label":"フロー 3","disabled":false,"info":""},{"id":"96ecb21f.c6d41","type":"http in","z":"8feaaef5.d1dd1","name":"","url":"/image-recognition","method":"get","upload":false,"swaggerDoc":"","x":120,"y":280,"wires":[["4e4556af.384868"]]},{"id":"4e4556af.384868","type":"template","z":"8feaaef5.d1dd1","name":"画像認識","field":"payload","fieldType":"msg","format":"handlebars","syntax":"mustache","template":"<!DOCTYPE html>\n<html lang=\"en\" dir=\"ltr\">\n  <head>\n    <meta charset=\"utf-8\">\n    <title>画像認識</title>\n    <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css\">\n    <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js\"></script>\n    <script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.2.0/js/bootstrap.min.js\"></script>\n    <script>\n    window.onload = () => {\n\t  const video  = document.querySelector(\"#video_camera\");\n\t  const canvas = document.querySelector(\"#canvas_picture\");\n\t  const se     = document.querySelector('#audio_se');\n\n\t  /** カメラ設定 */\n\t  const constraints = {\n\t    audio: false,\n\t    video: {\n\t      width: 300,\n\t      height: 200,\n\t      facingMode: \"user\"   // フロントカメラを利用する\n\t      // facingMode: { exact: \"environment\" }  // リアカメラを利用する場合\n\t    }\n\t  };\n\n\t  /**\n\t   * カメラを<video>と同期\n\t   */\n\t  navigator.mediaDevices.getUserMedia(constraints)\n\t  .then( (stream) => {\n\t    video.srcObject = stream;\n\t    video.onloadedmetadata = (e) => {\n\t      video.play();\n\t    };\n\t  })\n\t  .catch( (err) => {\n\t    console.log(err.name + \": \" + err.message);\n\t  });\n\n\t  /**\n\t   * 撮影ボタン\n\t   */\n\t   document.querySelector(\"#btn_recording\").addEventListener(\"click\", () => {\n\t    const ctx = canvas.getContext(\"2d\");\n\n\t    // 演出的な目的で一度映像を止めてSEを再生する\n\t    video.pause();  // 映像を停止\n\t    se.play();      // シャッター音\n\t    setTimeout( () => {\n\t      video.play();    // 0.5秒後にカメラ再開\n\t    }, 500);\n\n\t    // canvasに画像を貼り付ける\n\t    ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n\t    // DataURLに変換\n\t    var dataURL = canvas.toDataURL(\"image/jpeg\");                 // DataURLに変換\n\t    var base64 = dataURL.replace(/^.*,/, '');                     // プレフィックスを削除してBase64部分だけ取り出し\n\t    form1.url.value = base64;\n\t    console.log(form1.url.value);\n\t  });\n\t};\n    </script>\n    <style type=\"text/css\">\n    <!--\n    .box3 {\n    padding: 0.5em 1em;\n    margin: 2em 0;\n    color: #2c2c2f;\n    background: #cde4ff;/*背景色*/\n    }\n    .box3 p {\n    margin: 0; \n    padding: 0;\n    }\n　　example {\n    margin: 10px auto;\n    width:50px;\n    background: orange;\n    }\n    \n    -->\n    canvas, video{\n    border: 1px solid gray;\n    }\n    </style>\n    </head>\n    <body>\n　　<center>\n　　<div class=\"box3\">\n    <h1>画像認識</h1>\n    </div>\n    \n  　<p>撮影ボタンでカメラ画像を撮影し、判定ボタンで画像認識を開始します</p>\n  　<video id=\"video_camera\" width=\"300\" height=\"200\"></video>\n    <canvas id=\"canvas_picture\" width=\"300\" height=\"200\"></canvas>\n    <form id=\"form1\" action=\"/image-classification\" method=\"post\">\n\t    <button type=\"button\" style=\"width:50%;padding:10px;font-size:30px;\" name=\"button\" class=\"recording\" id=\"btn_recording\">撮影</button><br><br><br>\n\t    <button type=\"submit\" style=\"width:50%;padding:10px;font-size:30px;\" name=\"button\" class=\"classification\" id=\"btn_classification\">判定</button><br><br><br>\n\t    <input type=\"hidden\" name=\"url\" value=\"\"/>\n    </form>\n    <form id=\"form2\" action=\"/index\" method=\"get\">\n\t    <button type=\"submit\" style=\"width:50%;padding:10px;font-size:30px;\" name=\"button\" class=\"return\" id=\"btn_return\">戻る</button><br><br><br>\n    </form>\n    <audio id=\"audio_se\" preload=\"auto\">\n        <source src=\"camera-shutter1.mp3\" type=\"audio/mp3\">\n    </audio>\n    <div class=\"panel-footer\" style=\"height:100px;\">\n      <div id=\"result\"></div>\n    </div>\n　　</center>\n  </body>\n</html>","output":"str","x":320,"y":280,"wires":[["ec9a5ce6.cf22d","69333c68.d854b4"]]},{"id":"5a257905.bfbe68","type":"http in","z":"8feaaef5.d1dd1","name":"","url":"/image-classification","method":"post","upload":false,"swaggerDoc":"","x":130,"y":440,"wires":[["d4fe48a2.d9d778"]]},{"id":"6ae21efd.9994c","type":"template","z":"8feaaef5.d1dd1","name":"結果","field":"payload","fieldType":"msg","format":"handlebars","syntax":"mustache","template":"<title>Visual Recognition</title>\n<h1>Classify Images by Visual Recognition </h1>\n<img src=\"{{result.images.0.image}}\" width=\"320\" />\n<h2>結果</h2>\nこれは\n{{result.images.0.classifiers.0.classes.0.class}}\n（確信度:{{result.images.0.classifiers.0.classes.0.score}}\n)です。\n\n{{#result}}\n  {{#images}}\n    {{#classifiers}}\n  <table border=\"1\">\n      <tr><th>分類名</th><th>確信度</th></tr>\n      {{#classes}}\n      <tr>\n        <td> {{class}} </td> \n        <td> {{score}} </td>\n      </tr>\n      {{/classes}}\n    {{/classifiers}}\n  </table>\n  {{/images}}\n{{/result}}\n<form id=\"form\" action=\"/image-recognition\" method=\"get\">\n  <button type=\"submit\" id=\"return\">戻る</button>\n</form>","output":"str","x":670,"y":440,"wires":[["b1898dc5.e75b7"]]},{"id":"7d0b969c.1cc698","type":"debug","z":"8feaaef5.d1dd1","name":"","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":670,"y":520,"wires":[]},{"id":"2e4e4074.2139b","type":"visual-recognition-v3","z":"8feaaef5.d1dd1","name":"","vr-service-endpoint":"","image-feature":"classifyImage","lang":"ja","x":490,"y":520,"wires":[["6ae21efd.9994c","7d0b969c.1cc698"]]},{"id":"b1898dc5.e75b7","type":"http response","z":"8feaaef5.d1dd1","name":"","statusCode":"","headers":{},"x":810,"y":440,"wires":[]},{"id":"ec9a5ce6.cf22d","type":"http response","z":"8feaaef5.d1dd1","name":"","statusCode":"","headers":{},"x":470,"y":280,"wires":[]},{"id":"69333c68.d854b4","type":"debug","z":"8feaaef5.d1dd1","name":"","active":true,"tosidebar":true,"console":true,"tostatus":false,"complete":"payload","targetType":"msg","x":500,"y":320,"wires":[]},{"id":"d4fe48a2.d9d778","type":"function","z":"8feaaef5.d1dd1","name":"base64decode","func":"msg.payload = new Buffer(msg.payload.url, 'base64');\nreturn msg;","outputs":1,"noerr":0,"x":320,"y":480,"wires":[["2e4e4074.2139b"]]},{"id":"9e65cc47.b366e","type":"comment","z":"8feaaef5.d1dd1","name":"画像認識　カメラを認識して画像取得します。","info":"","x":200,"y":240,"wires":[]},{"id":"e1aef756.88feb8","type":"comment","z":"8feaaef5.d1dd1","name":"画像をバイナリ変換してからWatsonで判定します。","info":"","x":210,"y":400,"wires":[]},{"id":"a5cea2b9.9d806","type":"template","z":"8feaaef5.d1dd1","name":"打音収集","field":"payload","fieldType":"msg","format":"html","syntax":"plain","template":"<!DOCTYPE html>\n<html lang=\"en\" dir=\"ltr\">\n  <head>\n    <meta charset=\"utf-8\">\n    <title>打音判定</title>\n    <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css\">\n    <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js\"></script>\n    <script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.2.0/js/bootstrap.min.js\"></script>\n    <script>\n    $(function() {\n  $('#btn_start_recording').on('click', function(){\n    startRecording();\n  })\n\n  $('#btn_stop_recording').on('click', function(){\n    endRecording();\n  })\n  \n  $('#btn_classification').on('click', function(){\n    classification();\n  })\n  \n})\n // ///////////////////////////////////////////\n // 録音関係\n // ///////////////////////////////////////////\n\n // 変数定義\n let localMediaStream = null;\n let localScriptProcessor = null;\n let audioSampleRate = null;\n let audioContext = null;\n let bufferSize = 1024;\n let audioData = []; // 録音データ\n let recordingFlg = false;\n let dl = null;\n let blob = null;\n let geo_json = [];\n  \n // 録音バッファ作成（録音中自動で繰り返し呼び出される）\n function onAudioProcess(e) {\n     if (!recordingFlg) return;\n     console.log('onAudioProcess');\n\n     // 音声のバッファを作成\n     let input = e.inputBuffer.getChannelData(0);\n     let bufferData = new Float32Array(bufferSize);\n     for (let i = 0; i < bufferSize; i++) {\n         bufferData[i] = input[i];\n     }\n     audioData.push(bufferData);\n }\n\n // 解析開始\n function startRecording(evt_stream) {\n     // 画面アクセス時にマイクを取得\n     console.log('startRecording');\n     recordingFlg = true;\n\n     // 取得されている音声ストリームの録音を開始\n     localMediaStream = evt_stream;\n\n     if (!navigator || !navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {\n       alert('Missing support for navigator.mediaDevices.getUserMedia') // temp: helps when testing for strange issues on ios/safari\n       return\n     }\n\n     audioContext = new (window.AudioContext || window.webkitAudioContext)();\n     // サンプルレートを保持しておく\n     audioSampleRate = audioContext.sampleRate;\n\n     let scriptProcessor = audioContext.createScriptProcessor(bufferSize, 1, 1);\n     localScriptProcessor = scriptProcessor;\n\n     if (audioContext.createMediaStreamDestination) {\n       destinationNode = audioContext.createMediaStreamDestination()\n     }\n     else {\n       destinationNode = audioContext.destination\n     }\n\n     // safariで Web Audio APIを動かすため、先にaudioContextを生成し、UserMediaを生成する\n     return navigator.mediaDevices.getUserMedia({audio: true})\n       .then((stream) => {\n         this._startRecordingWithStream(stream, destinationNode, scriptProcessor)\n       })\n       .catch((error) => {\n         alert('Error with getUserMedia: ' + error.message) // temp: helps when testing for strange issues on ios/safari\n         console.log(error)\n       })\n   }\n\n   function _startRecordingWithStream(stream, destinationNode, scriptProcessor) {\n     // ループ処理のセット\n     let mediastreamsource = audioContext.createMediaStreamSource(stream);\n     mediastreamsource.connect(scriptProcessor);\n     scriptProcessor.onaudioprocess = onAudioProcess;\n     console.log('startRecording scriptProcessor.connect(audioContext.destination)');\n     scriptProcessor.connect(destinationNode);\n   }\n\n // 解析終了\n function endRecording() {\n     console.log('endRecording');\n     recordingFlg = false;\n     // console.log('audioData');\n     // console.log(audioData);\n\n     // console.log('blob = exportWAV(audioData)');\n     // 録音できたので録音データをwavにしてinputに配置＆再生ボタンに登録\n     blob = exportWAV(audioData);\n     // データ送信用のinputタグを取得\n     let wave_tag = document.getElementById('demo_speaking_wave_file');\n\n     // base64加工\n     let reader = new FileReader();\n     reader.readAsDataURL(blob);\n     reader.onloadend = function() {\n         base64data = reader.result;\n         // console.log('base64data');\n         // console.log(base64data);\n        //wave_tag.value = base64data;\n     };\n\n     let myURL = window.URL || window.webkitURL;\n     let url = myURL.createObjectURL(blob);\n     //dl = document.querySelector(\"#dl\");\n     \n     dl = \"test\";\n     //集音したものから音声データを作成する\n     //dl.href = myURL.createObjectURL(blob);\n     \n     //var min = 0 ;\n　　 //var max = 9 ;\n\n     //var a = Math.floor( Math.random() * (max + 1 - min) ) + min ;\n     //var b = Math.floor( Math.random() * (max + 1 - min) ) + min ;\n     //dl.download = new Date().getTime().toString(16) + '-' + a + b + '.wav';\n     // console.log('wavefile');\n     // console.log(url);\n\n     // audioタグに録音データをセット\n     let player = document.getElementById('player');\n     player.src =  url;\n     player.load();\n\n     // audioDataをクリア\n     localMediaStream = null;\n     localScriptProcessor = null;\n     audioContext.close()\n     audioContext = null;\n     audioData = []; // 録音データ\n }\n\n // ///////////////////////////////////////////\n // waveファイル作成処理\n // ///////////////////////////////////////////\n\n function exportWAV(audioData) {\n\n     let encodeWAV = function(samples, sampleRate) {\n         let buffer = new ArrayBuffer(44 + samples.length * 2);\n         let view = new DataView(buffer);\n\n         let writeString = function(view, offset, string) {\n             for (let i = 0; i < string.length; i++){\n                 view.setUint8(offset + i, string.charCodeAt(i));\n             }\n         };\n\n         let floatTo16BitPCM = function(output, offset, input) {\n             for (let i = 0; i < input.length; i++, offset += 2){\n                 let s = Math.max(-1, Math.min(1, input[i]));\n                 output.setInt16(offset, s < 0 ? s * 0x8000 : s * 0x7FFF, true);\n             }\n         };\n\n         writeString(view, 0, 'RIFF');  // RIFFヘッダ\n         view.setUint32(4, 32 + samples.length * 2, true); // これ以降のファイルサイズ\n         writeString(view, 8, 'WAVE'); // WAVEヘッダ\n         writeString(view, 12, 'fmt '); // fmtチャンク\n         view.setUint32(16, 16, true); // fmtチャンクのバイト数\n         view.setUint16(20, 1, true); // フォーマットID\n         view.setUint16(22, 1, true); // チャンネル数\n         view.setUint32(24, sampleRate, true); // サンプリングレート\n         view.setUint32(28, sampleRate * 2, true); // データ速度\n         view.setUint16(32, 2, true); // ブロックサイズ\n         view.setUint16(34, 16, true); // サンプルあたりのビット数\n         writeString(view, 36, 'data'); // dataチャンク\n         view.setUint32(40, samples.length * 2, true); // 波形データのバイト数\n         floatTo16BitPCM(view, 44, samples); // 波形データ\n\n         return view;\n     };\n\n     let mergeBuffers = function(audioData) {\n         let sampleLength = 0;\n         for (let i = 0; i < audioData.length; i++) {\n             sampleLength += audioData[i].length;\n         }\n         let samples = new Float32Array(sampleLength);\n         let sampleIdx = 0;\n         for (let i = 0; i < audioData.length; i++) {\n             for (let j = 0; j < audioData[i].length; j++) {\n                 samples[sampleIdx] = audioData[i][j];\n                 sampleIdx++;\n             }\n         }\n         return samples;\n     };\n\n     let dataview = encodeWAV(mergeBuffers(audioData), audioSampleRate);\n     let audioBlob = new Blob([dataview], { type: 'audio/wav' });\n\n     return audioBlob;\n\n     // let myURL = window.URL || window.webkitURL;\n     // let url = myURL.createObjectURL(audioBlob);\n     // return url;\n }\n\n function audioPlay() {\n     let play_button = document.getElementById(\"btn_play_pause\");\n     play_button.onclick = new Function(\"audioPause();\");\n     play_button.innerText = \"停止\";\n     document.getElementById(\"player\").play();\n }\n\n function audioPause() {\n     let play_button = document.getElementById(\"btn_play_pause\");\n     play_button.onclick = new Function(\"audioPlay();\");\n     play_button.innerText = \"再生\";\n     document.getElementById(\"player\").pause();\n }\n    \n  function classification() {\n      \n      if (blob === null || blob === undefined) {\n         document.getElementById(\"result\").innerText = \"打音が録音されてません\" ;  \n      } else {　\n      \n      //地図情報の取得\n      if (navigator.geolocation) {\n    　/* 現在の位置情報を取得 */\n    　navigator.geolocation.getCurrentPosition(function(pos) {//位置情報の取得に成功した場合\n\n    \n      // POSTでアップロード\n      var fd = new FormData();\n      fd.append('fname', 'test.wav');\n      fd.append(\"data\", blob);\n      fd.append(\"latitude\", pos.coords.latitude );\n      fd.append(\"longtitude\", pos.coords.longitude );\n      \n      console.log('done!');\n      $.ajax({\n          url  : \"./classification\",\n          type : \"POST\",\n          data : fd,\n          cache       : false,\n          contentType : false,\n          processData : false,\n          dataType    : \"html\",\n      })\n      .done(function(data, textStatus, jqXHR) {\n        var result_element = document.getElementById('result');\n\n        var objResult = JSON.parse(data);\n        //var objResult = data;\n        console.log(data);\n\n        // 子ノードを全削除\n        if (result_element.hasChildNodes()){\n          for (var i=result_element.childNodes.length-1; i>=0; i--) {\n            result_element.removeChild(result_element.childNodes[i]);\n          }\n        }\n\n        // classifierId+name\n        var classifier;\n        classifier = document.createTextNode(\"classifierId=\"+objResult.images[0].classifiers[0].classifier_id+\", classifierName=\"+objResult.images[0].classifiers[0].name);\n        var classifierBox = document.createElement('p');\n        classifierBox.appendChild(classifier);\n        result_element.appendChild(classifierBox);\n\n        // classes\n        var classes;\n        classes = document.createTextNode(\"className=\"+objResult.images[0].classifiers[0].classes[0].class +\", score=\"+objResult.images[0].classifiers[0].classes[0].score );\n        var classesBox = document.createElement('p');\n        classesBox.appendChild(classes);\n        result_element.appendChild(classesBox);\n      })\n      .fail(function(jqXHR, textStatus, errorThrown) {\n          // エラー\n          console.log('error!');\n          var result_element = document.getElementById('result');\n          var error;\n          error = document.createTextNode(\"error=\"+errorThrown);\n          var errorBox = document.createElement('p');\n          errorBox.appendChild(error);\n          result_element.appendChild(errorBox);\n          return;\n      })\n      .always(function(data) {\n        // do nothing\n      });      \n    　}, function(error) {//位置情報の取得に失敗した場合\n        var msg;\n        switch (error.code) {\n            /* エラーコード\n             1．位置情報の取得が許可されていない\n             2．位置情報の取得が利用できない\n             3．タイムアウト\n             */\n            case error.PERMISSION_DENIED:\n                //エンド・ユーザーが、Geolocation APIの仕様を許可しない場合に発生\n                msg = \"位置情報取得の使用許可がされませんでした\" + \"\\n\";\n                break;\n            case error.POSITION_UNAVAILABLE:\n                //在位置を特定できない場合に発生\n                msg = \"位置情報を特定できませんでした\" + \"\\n\";\n                break;\n            case error.PERMISSION_DENIED_TIMEOUT:\n                msg = \"位置情報取得がタイムアウトしました\" + \"\\n\";\n                break;\n            default:\n                msg = \"位置情報取得で不明なエラーが発生しました(CODE: \" + error.code + \")\\n\";\n                break;\n        　　}\n        　　if (error.message) {\n            　　msg += error.message + \"\\n\";\n        　　}\n        　　alert(msg);\n    　　}, {\n        　　enableHightAccuracy : true, //高精度の情報を取得するかどうかを指定（Boolean型）\n        　　timeout : 30000//タイムアウトまでの時間を指定\n        　　//maximumAge:   位置情報の有効期限を指定\n    　　});\n　　　　} else {\n    　　　　alert(\"ご利用のブラウザでは位置情報を取得できません\");\n　　　　} \n          }           \n        }\n    </script>\n    <style type=\"text/css\">\n    <!--\n    .box3 {\n    padding: 0.5em 1em;\n    margin: 2em 0;\n    color: #2c2c2f;\n    background: #cde4ff;/*背景色*/\n    }\n    .box3 p {\n    margin: 0; \n    padding: 0;\n    }\n　　example {\n    margin: 10px auto;\n    width:50px;\n    background: orange;\n    }\n    \n    --> \n    </style>\n    </head>\n    <body>\n　　<center>\n　　<div class=\"box3\">\n    <h1>打音の判定</h1>\n    </div>\n    \n  　<p>レコード開始実行と同時に録音がはじまり、レコード停止後に音声データを生成します</p>\n    <button type=\"button\" style=\"width:50%;padding:10px;font-size:30px;\" name=\"button\" class=\"start_recording\" id=\"btn_start_recording\">レコード開始</button><br><br><br>\n    <button type=\"button\" style=\"width:50%;padding:10px;font-size:30px;\" name=\"button\" class=\"stop_recording\" id=\"btn_stop_recording\">ストップ</button><br><br><br>\n    <audio id=\"player\" controls></audio><br><br><br>\n    <button type=\"button\" style=\"width:50%;padding:10px;font-size:30px;\" name=\"button\" class=\"classification\" id=\"btn_classification\">判定</button><br><br><br>\n    <div class=\"panel-footer\" style=\"height:100px;\">\n      <div id=\"result\"></div>\n    </div>\n　　</center>\n  </body>\n</html>","output":"str","x":340,"y":720,"wires":[["e3c51117.a1b7b"]]},{"id":"cdc939f9.967cb8","type":"http in","z":"8feaaef5.d1dd1","name":"/pr-hokkaido-classification","url":"/pr-hokkiado-classification","method":"get","upload":false,"swaggerDoc":"","x":130,"y":720,"wires":[["a5cea2b9.9d806"]]},{"id":"e3c51117.a1b7b","type":"http response","z":"8feaaef5.d1dd1","name":"http response","statusCode":"","headers":{},"x":520,"y":720,"wires":[]},{"id":"994d356e.e8c838","type":"comment","z":"8feaaef5.d1dd1","name":"打音の集音　UI提供部分　ここは別枠でWEBアプリとして外出ししても良いかと思います。","info":"","x":340,"y":680,"wires":[]},{"id":"a61c4db9.828cf","type":"comment","z":"8feaaef5.d1dd1","name":"打音データの可視化とWatsonによる判別","info":"","x":180,"y":780,"wires":[]},{"id":"9232a55b.355168","type":"http request","z":"8feaaef5.d1dd1","name":"pythonの外部サービスに処理を渡す","method":"POST","ret":"obj","paytoqs":false,"url":"http://184.172.247.52:30872/spectrogram","tls":"","persist":false,"proxy":"","authType":"","x":550,"y":880,"wires":[["3f9d3be1.935dc4"]]},{"id":"5dc684d4.73257c","type":"function","z":"8feaaef5.d1dd1","name":"打音データ受け渡し","func":"var buf = msg.req.files[0].buffer;\nmsg.file = buf;\nvar latitude = msg.req.body.latitude;\nvar longtitude = msg.req.body.longtitude;\nmsg.latitude = latitude;\nmsg.longtitude = longtitude;\nmsg.payload = msg.file;\nreturn msg;","outputs":1,"noerr":0,"x":260,"y":880,"wires":[["9232a55b.355168","491d2e8b.fd4e"]]},{"id":"3f9d3be1.935dc4","type":"function","z":"8feaaef5.d1dd1","name":"ダミー","func":"\nreturn msg;\n","outputs":1,"noerr":0,"x":750,"y":920,"wires":[["91a84e7.4048fb","85b7058b.db68b8","1f29df27.e90691"]]},{"id":"332326a3.be2e3a","type":"http in","z":"8feaaef5.d1dd1","name":"/classification","url":"/classification","method":"post","upload":true,"swaggerDoc":"","x":90,"y":840,"wires":[["5dc684d4.73257c"]]},{"id":"491d2e8b.fd4e","type":"debug","z":"8feaaef5.d1dd1","name":"","active":true,"tosidebar":true,"console":true,"tostatus":false,"complete":"req","targetType":"msg","x":460,"y":920,"wires":[]},{"id":"91a84e7.4048fb","type":"http response","z":"8feaaef5.d1dd1","name":"結果を返却","statusCode":"","headers":{},"x":910,"y":920,"wires":[]},{"id":"85b7058b.db68b8","type":"function","z":"8feaaef5.d1dd1","name":"DB格納用の情報","func":"var class_value=msg.payload.images[0].classifiers[0].classes[0].class;\nvar score_value=msg.payload.images[0].classifiers[0].classes[0].score;\nvar longtitude=msg.longtitude;\nvar latitude=msg.latitude;\nvar date = new Date();\ndate.setHours(date.getHours() + 9);\nresult = {\n    \"date\": date.toString(),\n    \"latitude\": latitude,\n    \"longtitude\": longtitude,\n    \"class\": class_value,\n    \"score\": score_value\n}\nmsg.payload = result;\nreturn msg;\n","outputs":1,"noerr":0,"x":920,"y":1020,"wires":[["eaaec2e0.75fb4"]]},{"id":"1f29df27.e90691","type":"debug","z":"8feaaef5.d1dd1","name":"","active":true,"tosidebar":true,"console":true,"tostatus":false,"complete":"latitude","targetType":"msg","x":920,"y":960,"wires":[]},{"id":"eaaec2e0.75fb4","type":"cloudant out","z":"8feaaef5.d1dd1","name":"DBにデータ格納","cloudant":"b9c9a741.76c2a8","database":"result","service":"_ext_","payonly":true,"operation":"insert","x":1100,"y":1020,"wires":[]},{"id":"755bbfeb.2597d","type":"debug","z":"8feaaef5.d1dd1","name":"","active":true,"tosidebar":true,"console":true,"tostatus":false,"complete":"payload","targetType":"msg","x":460,"y":120,"wires":[]},{"id":"476e11fd.aacc7","type":"template","z":"8feaaef5.d1dd1","name":"インデックス","field":"payload","fieldType":"msg","format":"handlebars","syntax":"mustache","template":"<!DOCTYPE html>\n<html lang=\"en\" dir=\"ltr\">\n  <head>\n    <meta charset=\"utf-8\">\n    <title>ＰＲ北海道</title>\n    <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css\">\n    <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js\"></script>\n    <script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.2.0/js/bootstrap.min.js\"></script>\n    <style type=\"text/css\">\n    <!--\n    .box3 {\n    padding: 0.5em 1em;\n    margin: 2em 0;\n    color: #2c2c2f;\n    background: #cde4ff;/*背景色*/\n    }\n    .box3 p {\n    margin: 0; \n    padding: 0;\n    }\n　　example {\n    margin: 10px auto;\n    width:50px;\n    background: orange;\n    }\n    \n    -->\n    </style>\n    </head>\n    <body>\n　　<center>\n　　<div class=\"box3\">\n    <h1>ＰＲ北海道</h1>\n    </div>\n    <form id=\"form1\" action=\"/image-recognition\" method=\"get\">\n\t    <button type=\"submit\" style=\"width:50%;padding:10px;font-size:30px;\" name=\"button\">画像認識</button><br><br><br>\n    </form>\n    <form id=\"form2\" action=\"/pr-hokkiado-classification\" method=\"get\">\n        <button type=\"submit\" style=\"width:50%;padding:10px;font-size:30px;\" name=\"button\">打音判定</button><br><br><br>\n    </form>\n　　</center>\n  </body>\n</html>","output":"str","x":260,"y":80,"wires":[["4239ae9c.5ba34","755bbfeb.2597d"]]},{"id":"489956f6.112a78","type":"http in","z":"8feaaef5.d1dd1","name":"","url":"/index","method":"get","upload":false,"swaggerDoc":"","x":80,"y":80,"wires":[["476e11fd.aacc7"]]},{"id":"4239ae9c.5ba34","type":"http response","z":"8feaaef5.d1dd1","name":"","statusCode":"","headers":{},"x":430,"y":80,"wires":[]},{"id":"d2296f9b.c40ac","type":"comment","z":"8feaaef5.d1dd1","name":"index画面　画像認識、打音判定画面に遷移します。","info":"","x":210,"y":40,"wires":[]},{"id":"b9c9a741.76c2a8","type":"cloudant","z":"","host":"y-tsugueda.cloudant.com","name":"result"}]